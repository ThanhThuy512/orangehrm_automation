# pages/dashboard_page.py ‚Äì thao t√°c v·ªõi trang Dashboard

from selenium.webdriver.common.by import By # => Import c√¥ng c·ª• ƒë·ªãnh v·ªã ph·∫ßn t·ª≠ (By.ID, By.CSS_SELECTOR, ...)
from pages.base_page import BasePage # => K·∫ø th·ª´a class BasePage ƒë·ªÉ d√πng l·∫°i h√†m find_element, enter_text
from selenium.webdriver.support import expected_conditions as EC

class DashboardPage(BasePage):
    # ƒê·ªãnh danh thanh menu ch√≠nh sau khi ƒëƒÉng nh·∫≠p
    MAIN_MENU_ITEMS = (By.CSS_SELECTOR, "ul.oxd-main-menu li")  # => ƒê·ªãnh v·ªã t·∫•t c·∫£ m·ª•c menu (b√™n tr√°i) tr√™n dashboard

    # Thanh t√¨m ki·∫øm nhanh ·ªü g√≥c tr√™n tr√°i (n·∫øu c√≥)
    QUICK_SEARCH_INPUT = (By.CSS_SELECTOR, "input.oxd-input") # => ƒê·ªãnh v·ªã √¥ input ƒë·ªÉ t√¨m ch·ª©c nƒÉng ho·∫∑c nh√¢n vi√™n (n·∫øu c√≥)

    SUGGESTION_ITEM = (By.XPATH, "//span[text()='Leave']")  # üëà G·ª£i √Ω trong k·∫øt qu·∫£
    
    def get_menu_items_text(self):   # => Tr·∫£ v·ªÅ danh s√°ch t√™n c·ªßa c√°c m·ª•c trong menu
        """
        L·∫•y danh s√°ch c√°c nh√£n menu hi·ªÉn th·ªã b√™n tr√°i dashboard
        Tr·∫£ v·ªÅ: list ch·ª©a text c·ªßa t·ª´ng m·ª•c
        """
        elements = self.find_all_elements(*self.MAIN_MENU_ITEMS)  # T√¨m t·∫•t c·∫£ c√°c item menu
        return [el.text for el in elements if el.text.strip()]    # Tr√≠ch text v√† l·ªçc ph·∫ßn t·ª≠ r·ªóng

    def search_in_dashboard(self, keyword):  # => T·ª± ƒë·ªông nh·∫≠p t·ª´ kh√≥a v√†o √¥ t√¨m ki·∫øm
        """
         G√µ t·ª´ kh√≥a v√†o √¥ t√¨m ki·∫øm tr√™n Dashboard (x·ª≠ l√Ω stale element)
        """
        #self.enter_text(*self.QUICK_SEARCH_INPUT, keyword)
        # Ch·ªù √¥ t√¨m ki·∫øm s·∫µn s√†ng v√† nh·∫≠p t·ª´ kh√≥a
        input_box = self.wait.until(EC.element_to_be_clickable(self.QUICK_SEARCH_INPUT))
        input_box.clear()
        input_box.send_keys(keyword)

        # Ch·ªù g·ª£i √Ω xu·∫•t hi·ªán v√† click v√†o
        suggestion = self.wait.until(EC.element_to_be_clickable(self.SUGGESTION_ITEM))
        suggestion.click()
